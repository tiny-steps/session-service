server:
  port: 8087
spring:
  application:
    name: ts-session-service
  security:
    oauth2:
      resourceserver:
        jwt:
          # URI of your Auth Service. The resource server will fetch public keys from here to validate tokens.
          issuer-uri: http://ts-auth-service:8081
  datasource:
    url: jdbc:postgresql://localhost:5432/sessions
    username: postgres
    password: root
    driver-class-name: org.postgresql.Driver
    hikari:
      maximum-pool-size: 5 # A much more reasonable default
      minimum-idle: 2
  jpa:
    database-platform: org.hibernate.dialect.PostgreSQLDialect
    show-sql: true
    properties:
      hibernate:
        format_sql: true
        use_sql_comments: true
        jdbc:
          lob:
            non_contextual_creation: true
    open-in-view: false
    hibernate:
      ddl-auto: update

eureka:
  instance:
    prefer-ip-address: true
  client:
    register-with-eureka: true
    fetch-registry: true
    service-url:
      defaultZone: http://localhost:8761/eureka/

# Integration service URLs
integration:
  doctor-service:
    base-url: http://ts-doctor-service/api/v1/doctors
    practice-url: http://ts-doctor-service/api/v1/practices
  patient-service:
    base-url: http://ts-patient-service/api/v1/patients
  address-service:
    base-url: http://ts-address-service/api/v1/addresses
  user-service:
    base-url: http://ts-user-service/api/v1/users
  appointment-service:
    base-url: http://ts-appointment-service/api/v1/appointments

# Resilience4j Configuration
resilience4j:
  circuitbreaker:
    instances:
      ts-doctor-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s
      ts-patient-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s
      ts-address-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s
      ts-user-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s
      ts-appointment-service:
        register-health-indicator: true
        sliding-window-size: 10
        minimum-number-of-calls: 5
        permitted-number-of-calls-in-half-open-state: 3
        wait-duration-in-open-state: 30s
        failure-rate-threshold: 50
        slow-call-rate-threshold: 50
        slow-call-duration-threshold: 2s

  retry:
    instances:
      ts-doctor-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - org.springframework.web.reactive.function.client.WebClientRequestException
      ts-patient-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - org.springframework.web.reactive.function.client.WebClientRequestException
      ts-address-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - org.springframework.web.reactive.function.client.WebClientRequestException
      ts-user-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - org.springframework.web.reactive.function.client.WebClientRequestException
      ts-appointment-service:
        max-attempts: 3
        wait-duration: 1s
        exponential-backoff-multiplier: 2
        retry-exceptions:
          - java.net.ConnectException
          - java.net.SocketTimeoutException
          - org.springframework.web.reactive.function.client.WebClientRequestException

  timelimiter:
    instances:
      ts-doctor-service:
        timeout-duration: 10s
        cancel-running-future: true
      ts-patient-service:
        timeout-duration: 10s
        cancel-running-future: true
      ts-address-service:
        timeout-duration: 10s
        cancel-running-future: true
      ts-user-service:
        timeout-duration: 10s
        cancel-running-future: true
      ts-appointment-service:
        timeout-duration: 10s
        cancel-running-future: true

# Logging configuration for integration monitoring
logging:
  level:
    com.tinysteps.sessionservice.integration: DEBUG
    io.github.resilience4j: INFO
  pattern:
    console: "%d{yyyy-MM-dd HH:mm:ss} - %msg%n"

# Actuator configuration for health checks and monitoring
management:
  endpoints:
    web:
      exposure:
        include: health,info,metrics,circuitbreakers,circuitbreakerevents
  endpoint:
    health:
      show-details: always
      show-components: always
  health:
    circuitbreakers:
      enabled: true
  info:
    env:
      enabled: true
internal:
  api:
    secret: "902ffc52f4ab670361e543008a5f8e86005edadfbc1df36f5cc375b433448aff"
